const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const asyncHandler = require('express-async-handler');
const crypto = require('crypto');
const sgMail = require('@sendgrid/mail');
sgMail.setApiKey(process.env.SENDGRID_API_KEY);

const User = require('../model/userModel');

const emailConfirmHTML = require('../mailer/HTMLmessages/emailConfirmation');

//-----------------------------------------------------------------//
// @desc  register new user
// @route POST /api/users
// @access Public
//-----------------------------------------------------------------//

const registerUser = asyncHandler(async (req, res) => {
  const { name, email, password } = req.body;

  if (!name || !password || !email) {
    res.status(400);
    throw new Error('please add all fields');
  }
  //check if user exists
  const userExists = await User.findOne({ email }); //tricky add in email as object
  if (userExists) {
    res.status(400);
    throw new Error('user already exists ');
  }
  //hash password
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);

  const user = await User.create({
    name,
    email,
    password: hashedPassword,
    emailConfirmationCode: generateJWT(
      crypto.randomBytes(32).toString('hex'),
      '5000d'
    ),
  });

  //if user is successfully created in db
  if (user) {
    const msg = {
      to: process.env.TEST_EMAIL, // Change to the email of user later
      from: process.env.MAILER_USER, // Change to your verified sender
      subject: 'Please activate your invoice-app account',
      text: 'Activation...',
      html: emailConfirmHTML(user),
    };

    try {
      await sgMail.send(msg);
    } catch (e) {
      throw new Error('failed to send registration email');
    }

    res.status(201).json({
      _id: user.id,
      name: user.name,
      email: user.email,
      token: generateJWT(user._id, '30d'),
    });
  } else {
    res.status(400);
    throw new Error('Invalid user data');
  }
});

//-----------------------------------------------------------------//
// @desc  authenticate user
// @route POST /api/users/login
// @access Public
//-----------------------------------------------------------------//

const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;
  //check for user email
  const user = await User.findOne({ email });

  if (user && (await bcrypt.compare(password, user.password))) {
    res.json({
      _id: user.id,
      name: user.name,
      email: user.email,
      token: generateJWT(user._id, '30d'),
    });
  } else {
    res.status(400);
    throw new Error('invalid credentials');
  }
});

//-----------------------------------------------------------------//
// @desc  user registration link from email
// @route GET /api/users/confirm/:token
// @access Private
//-----------------------------------------------------------------//

const activateUser = asyncHandler(async (req, res) => {
  const { emailConfirmationCode } = req.params;
  //check for user email

  let user = await User.findOneAndUpdate(
    { emailConfirmationCode },
    {
      status: 'Active',
    },
    {
      new: true,
    }
  );

  if (user) {
    //create a couple dummy invoices, so the user has a couple to see upon login

    res.redirect(301, 'http://localhost:5001');
  } else {
    res.status(400);
    throw new Error('could not activate please try again');
  }
});

// generate JWT
const generateJWT = (payload, expiresIn) => {
  return jwt.sign({ payload }, process.env.JWT_SECRET, { expiresIn });
};

module.exports = { registerUser, loginUser, activateUser };
